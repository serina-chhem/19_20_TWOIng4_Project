{"ast":null,"code":"module.exports = class Storage {\n  constructor(storage) {\n    this.storage = storage;\n    this.crashSafeWriteFile = this.writeFile;\n  }\n\n  exists(filename, callback) {\n    this.storage.getItem(filename, (err, value) => {\n      if (value !== null) {\n        return callback(true);\n      } else {\n        return callback(false);\n      }\n    });\n  }\n\n  rename(filename, newFilename, callback) {\n    this.storage.getItem(filename, (err, value) => {\n      if (value === null) {\n        this.storage.removeItem(newFilename, callback);\n      } else {\n        this.storage.setItem(newFilename, value, () => {\n          this.storage.removeItem(filename, callback);\n        });\n      }\n    });\n  }\n\n  writeFile(filename, contents, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n    }\n\n    this.storage.setItem(filename, contents, callback);\n  }\n\n  appendFile(filename, toAppend, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n    }\n\n    this.storage.getItem(filename, (err, contents) => {\n      contents = contents || '';\n      contents += toAppend;\n      this.storage.setItem(filename, contents, callback);\n    });\n  }\n\n  readFile(filename, options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n    }\n\n    this.storage.getItem(filename, (err, contents) => {\n      return callback(null, contents || '');\n    });\n  }\n\n  unlink(filename, callback) {\n    this.storage.removeItem(filename, callback);\n  }\n\n  mkdirp(dir, callback) {\n    return callback();\n  }\n\n  ensureDatafileIntegrity(filename, callback) {\n    return callback(null);\n  }\n\n};","map":null,"metadata":{},"sourceType":"script"}