{"ast":null,"code":"// export function promisefy(Datastore, methodName) {\n//   const method = Datastore.prototype[methodName];\n//\n//   return function (...args) {\n//     const self = this\n//\n//     return new Promise(function (resolve, reject) {\n//       let callback = args[args.length -1]\n//       let newArgs = [...args]\n//\n//       if (typeof callback === 'function') {\n//         newArgs = newArgs.slice(0, -1)\n//       } else {\n//         callback = function () {}\n//       }\n//\n//       method.bind(self)(...newArgs, function (err, res) {\n//         callback(err, res)\n//         if (err) return reject(err)\n//         resolve(res)\n//       })\n//     })\n//   }\n// }\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.promisefy = promisefy;\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction promisefy(Datastore, methodName) {\n  var method = Datastore.prototype[methodName];\n  return function () {\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    var self = this;\n    return new Promise(function (resolve, reject) {\n      var callback = args[args.length - 1];\n      var newArgs = [].concat(args);\n\n      if (typeof callback === \"function\") {\n        newArgs = newArgs.slice(0, -1);\n      } else {\n        callback = function callback() {};\n      }\n\n      method.bind(self).apply(undefined, _toConsumableArray(newArgs).concat([function (err, res) {\n        callback(err, res);\n        if (err) return reject(err);\n        resolve(res);\n      }]));\n    });\n  };\n}","map":null,"metadata":{},"sourceType":"script"}